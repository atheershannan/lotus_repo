// Corporate Learning Assistant Prisma Schema
// This file defines the database schema for the Corporate Learning Assistant

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id                String    @id @default(uuid()) @db.Uuid
  email             String    @unique
  name              String
  department        String?
  role              String    @default("learner")
  learningProfile   Json      @default("{}")
  preferences       Json      @default("{}")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  lastActiveAt      DateTime  @default(now()) @map("last_active_at")
  isActive          Boolean   @default(true) @map("is_active")

  // Relations
  createdContent    LearningContent[] @relation("ContentCreator")
  userProgress      UserProgress[]
  chatMessages      ChatMessage[]
  recommendations   Recommendation[]
  learningAnalytics LearningAnalytics[]
  queryEmbeddings   QueryEmbedding[]

  @@map("users")
}

// Skill model
model Skill {
  id                  String    @id @default(uuid()) @db.Uuid
  name                String
  description         String?
  category            String?
  level               String    @default("beginner")
  prerequisites       Json      @default("[]")
  learningObjectives  Json      @default("[]")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  // Relations
  userProgress        UserProgress[]
  skillEmbeddings     SkillEmbedding[]
  knowledgeNodes      KnowledgeNode[] @relation("SkillNode")

  @@map("skills")
}

// Learning Content model
model LearningContent {
  id                  String    @id @default(uuid()) @db.Uuid
  title               String
  description         String?
  contentType         String    @map("content_type")
  contentData         Json      @default("{}") @map("content_data")
  difficultyLevel     String    @default("beginner") @map("difficulty_level")
  estimatedDuration   Int?      @map("estimated_duration")
  skillsCovered       Json      @default("[]") @map("skills_covered")
  prerequisites       Json      @default("[]")
  learningObjectives  Json      @default("[]") @map("learning_objectives")
  metadata            Json      @default("{}")
  createdById         String    @map("created_by")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")
  isPublished         Boolean   @default(false) @map("is_published")

  // Relations
  createdBy           User      @relation("ContentCreator", fields: [createdById], references: [id])
  userProgress        UserProgress[]
  documentEmbeddings  DocumentEmbedding[]
  knowledgeNodes      KnowledgeNode[] @relation("ContentNode")

  @@map("learning_content")
}

// User Progress model
model UserProgress {
  id                  String    @id @default(uuid()) @db.Uuid
  userId              String    @map("user_id")
  contentId           String?   @map("content_id")
  skillId             String?   @map("skill_id")
  progressType        String    @map("progress_type")
  progressData        Json      @default("{}") @map("progress_data")
  completionPercentage Decimal @default(0) @map("completion_percentage") @db.Decimal(5, 2)
  status              String    @default("not_started")
  startedAt           DateTime? @map("started_at")
  completedAt         DateTime? @map("completed_at")
  lastAccessedAt      DateTime  @default(now()) @map("last_accessed_at")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  // Relations
  user                User      @relation(fields: [userId], references: [id])
  content             LearningContent? @relation(fields: [contentId], references: [id])
  skill               Skill?    @relation(fields: [skillId], references: [id])

  @@map("user_progress")
}

// Chat Message model
model ChatMessage {
  id              String    @id @default(uuid()) @db.Uuid
  userId          String    @map("user_id")
  sessionId       String    @map("session_id")
  messageType     String    @map("message_type")
  content         String
  metadata        Json      @default("{}")
  confidenceScore Decimal?  @map("confidence_score") @db.Decimal(3, 2)
  responseTimeMs  Int?      @map("response_time_ms")
  createdAt       DateTime  @default(now()) @map("created_at")

  // Relations
  user            User      @relation(fields: [userId], references: [id])

  @@map("chat_messages")
}

// Recommendation model
model Recommendation {
  id                  String    @id @default(uuid()) @db.Uuid
  userId              String    @map("user_id")
  recommendationType  String    @map("recommendation_type")
  targetId            String?   @map("target_id")
  targetType          String?   @map("target_type")
  reason              String?
  confidenceScore     Decimal?  @map("confidence_score") @db.Decimal(3, 2)
  metadata            Json      @default("{}")
  isAccepted          Boolean?  @map("is_accepted")
  createdAt           DateTime  @default(now()) @map("created_at")
  expiresAt           DateTime? @map("expires_at")

  // Relations
  user                User      @relation(fields: [userId], references: [id])

  @@map("recommendations")
}

// Learning Analytics model
model LearningAnalytics {
  id            String    @id @default(uuid()) @db.Uuid
  userId        String    @map("user_id")
  metricName    String    @map("metric_name")
  metricValue   Decimal?  @map("metric_value") @db.Decimal(10, 4)
  metricData    Json      @default("{}") @map("metric_data")
  periodStart   DateTime? @map("period_start")
  periodEnd     DateTime? @map("period_end")
  createdAt     DateTime  @default(now()) @map("created_at")

  // Relations
  user          User      @relation(fields: [userId], references: [id])

  @@map("learning_analytics")
}

// Document Embedding model
model DocumentEmbedding {
  id            String    @id @default(uuid()) @db.Uuid
  contentId     String?   @map("content_id")
  contentType   String    @map("content_type")
  contentText   String    @map("content_text")
  embedding     Unsupported("vector(1536)")?
  metadata      Json      @default("{}")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  content       LearningContent? @relation(fields: [contentId], references: [id])

  @@map("document_embeddings")
}

// Query Embedding model
model QueryEmbedding {
  id            String    @id @default(uuid()) @db.Uuid
  userId        String    @map("user_id")
  sessionId     String    @map("session_id")
  queryText     String    @map("query_text")
  embedding     Unsupported("vector(1536)")?
  responseText  String?   @map("response_text")
  metadata      Json      @default("{}")
  createdAt     DateTime  @default(now()) @map("created_at")

  // Relations
  user          User      @relation(fields: [userId], references: [id])

  @@map("query_embeddings")
}

// Skill Embedding model
model SkillEmbedding {
  id            String    @id @default(uuid()) @db.Uuid
  skillId       String    @map("skill_id")
  skillText     String    @map("skill_text")
  embedding     Unsupported("vector(1536)")?
  metadata      Json      @default("{}")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  skill         Skill     @relation(fields: [skillId], references: [id])

  @@map("skill_embeddings")
}

// Knowledge Node model
model KnowledgeNode {
  id            String    @id @default(uuid()) @db.Uuid
  nodeType      String    @map("node_type")
  nodeId        String    @map("node_id")
  nodeText      String    @map("node_text")
  embedding     Unsupported("vector(1536)")?
  properties    Json      @default("{}")
  skillId       String?   @map("skill_id") @db.Uuid
  contentId     String?   @map("content_id") @db.Uuid
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  skill         Skill?    @relation("SkillNode", fields: [skillId], references: [id])
  content       LearningContent? @relation("ContentNode", fields: [contentId], references: [id])
  sourceEdges   KnowledgeEdge[] @relation("SourceNode")
  targetEdges   KnowledgeEdge[] @relation("TargetNode")

  @@map("knowledge_nodes")
}

// Knowledge Edge model
model KnowledgeEdge {
  id                String    @id @default(uuid()) @db.Uuid
  sourceNodeId      String    @map("source_node_id")
  targetNodeId      String    @map("target_node_id")
  relationshipType  String    @map("relationship_type")
  weight            Decimal   @default(1.0) @db.Decimal(3, 2)
  metadata          Json      @default("{}")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relations
  sourceNode        KnowledgeNode @relation("SourceNode", fields: [sourceNodeId], references: [id])
  targetNode        KnowledgeNode @relation("TargetNode", fields: [targetNodeId], references: [id])

  @@map("knowledge_edges")
}

// Vector Search Cache model
model VectorSearchCache {
  id                String    @id @default(uuid()) @db.Uuid
  queryHash         String    @map("query_hash")
  queryEmbedding    Unsupported("vector(1536)")? @map("query_embedding")
  searchResults     Json      @map("search_results")
  resultCount       Int       @map("result_count")
  searchTimeMs      Int?      @map("search_time_ms")
  createdAt         DateTime  @default(now()) @map("created_at")
  expiresAt         DateTime  @map("expires_at")

  @@map("vector_search_cache")
}

